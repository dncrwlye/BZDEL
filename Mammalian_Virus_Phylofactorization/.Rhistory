write.xlsx(DF,file='Datasets/Olival_w_phylobin.xlsx')
saveRDS(DF,file='Workspaces/Olival_w_phylobin')
rm(list=ls())
setwd('Olival/')
library(mgcv)
library(dplyr)
library(stringi)
library(parallel)
library(purrr)
library(ggplot2)
library(viridis)
library(knitr)
library(svglite)
library(xlsx)
require(MuMIn)
source("Olival/R/model_reduction.R")
source("Olival/R/fit_gam.R")
source("Olival/R/relative_contributions.R")
source("Olival/R/cross_validation.R")
source("Olival/R/logp.R")
list.files()
setwd('~/Bozeman/BZDEL')
setwd('Mammalian_Virus_Phylofactorization')
library(mgcv)
library(dplyr)
library(stringi)
library(parallel)
library(purrr)
library(ggplot2)
library(viridis)
library(knitr)
library(svglite)
library(xlsx)
require(MuMIn)
source("Olival/R/model_reduction.R")
source("Olival/R/fit_gam.R")
source("Olival/R/relative_contributions.R")
source("Olival/R/cross_validation.R")
source("Olival/R/logp.R")
set.seed(0)
for (original in c(T,F)){
db <- readRDS("intermediates/postprocessed_database.rds")
# our modification
if (!original){
V <- read.xlsx('Datasets/Olival_w_phylobin.xlsx',sheetIndex = 1)
db$viruses <- cbind(db$viruses,V[,c('pfIsZ','pfIsZS','nonZ')])
db$viruses <- db$viruses[!as.logical(db$viruses$nonZ),]
}
hosts <- db$hosts
viruses <- db$viruses
associations <- db$associations
rm(db)
#---- All zoonoses ----
data_set = hosts %>%
filter(hMarOTerr == "Terrestrial",
hWildDomFAO == "wild",
!is.na(PdHoSa.cbCst_order))
outcome_variable = "NSharedWithHoSa"
model_family = poisson
#  Create dummy variables for orders to use as random effects
dummys = as.data.frame(with(data_set, model.matrix(~hOrder))[,-1])
data_set = cbind(data_set, dummys)
dummy_terms = paste0("s(", names(dummys), ", bs = 're')")
names(dummy_terms) <- names(dummys)
## Create data.frame of all possible models
terms = list(
mass = "s(hMassGramsPVR, bs = 'tp', k=7)",
interaction = c(
"s(HabAreaCropLn, bs = 'tp', k=7)   + s(HabAreaCropChgLn, bs = 'tp', k=7)",
"s(HabAreaGrassLn, bs = 'tp', k=7)  + s(HabAreaGrassChgLn, bs = 'tp', k=7)",
"s(HabAreaUrbanLn, bs = 'tp', k=7)  + s(HabAreaUrbanChgLn, bs = 'tp', k=7)",
"s(HabInhabitedLn, bs = 'tp', k=7)  + s(HabInhabitedChgLn, bs = 'tp', k=7)",
"s(TotHumPopLn, bs = 'tp', k=7) + s(TotHumPopChgLn, bs = 'tp', k=7) + s(UrbRurPopRatioLn, bs = 'tp', k=7) + s(UrbRurPopRatioChg, bs = 'tp', k=7)",
"s(HumPopDensLn, bs = 'tp', k=7) + s(HumPopDensLnChg, bs = 'tp', k=7) + s(UrbRurPopRatioLn, bs = 'tp', k=7) + s(UrbRurPopRatioChg, bs = 'tp', k=7)"),
interaction2 = "s(hHuntedIUCN, bs='re')",
interaction3 = "s(hArtfclHbttUsrIUCN, bs='re')",
phylo_distance = c("s(PdHoSa.cbCst, bs = 'tp', k=7)", "s(PdHoSaSTPD, bs = 'tp', k=7)"),
bias = c("s(hDiseaseZACitesLn, bs = 'tp', k=7)"),
offset = "offset(LnTotNumVirus)",
stringsAsFactors=FALSE)
terms = c(dummy_terms, terms)
if (!original){
all_zoonoses_new=fit_all_gams(data_set,
outcome_variable,
poisson,
terms)
} else {
all_zoonoses = fit_all_gams(data_set,
outcome_variable,
poisson,
terms)
}
}
# ---- Viral Traits GAM - All Associations ----
for (original in c(T,F)){
db <- readRDS("intermediates/postprocessed_database.rds")
# our modification
if (!original){
V <- read.xlsx('data/Olival_w_phylobin.xlsx',sheetIndex = 1)
db$viruses <- cbind(db$viruses,V[,c('pfIsZ','pfIsZS','nonZ')])
db$viruses <- db$viruses[!as.logical(db$viruses$nonZ),]
}
hosts <- db$hosts
viruses <- db$viruses
associations <- db$associations
rm(db)
PD_centers = names(viruses)[stri_detect_regex(names(viruses), "^(cb|st)_.*(?<!stringent)$")]
model_family = binomial
data_set = viruses %>%
mutate_each_(funs("logp"), vars=PD_centers)
names(data_set)[names(data_set) %in% PD_centers] <- paste0(PD_centers, "Ln")
PD_centers <- paste0(PD_centers, "Ln")
dummys = as.data.frame(with(viruses, model.matrix(~vFamily))[,-1])
data_set = cbind(data_set, dummys)
dummy_terms = paste0("s(", names(dummys), ", bs = 're')")
names(dummy_terms) <- names(dummys)
terms = list(
PD     = paste0("s(", PD_centers, ", bs='tp', k=7)"),
bias   = c("s(vPubMedCitesLn, bs='tp', k=7)", "s(vWOKcitesLn, bs='tp', k=7)"),
strand = c("s(RNA, bs='re')", "s(SS, bs='re')", "s(vCytoReplicTF, bs='re')"),
vector = "s(Vector, bs='re')",
env = "s(Envelope, bs='re')",
genome = "s(vGenomeAveLengthLn, bs='tp', k=7)",
stringsAsFactors=FALSE)
if (original){
vtraits = fit_all_gams(data_set,
outcome_variable = "IsZoonotic",
model_family = binomial,
terms)
data_set_old <- data_set
} else {
data_set_new <- data_set
vtraits_new = fit_all_gams(data_set,
outcome_variable = "IsZoonotic",
model_family = binomial,
terms)
}
}
save(list=ls(),file='intermediates/phylofactor_comparisons')
for (original in c(T,F)){
db <- readRDS("Olival/intermediates/postprocessed_database.rds")
# our modification
if (!original){
V <- read.xlsx('Datasets/Olival_w_phylobin.xlsx',sheetIndex = 1)
db$viruses <- cbind(db$viruses,V[,c('pfIsZ','pfIsZS','nonZ')])
db$viruses <- db$viruses[!as.logical(db$viruses$nonZ),]
}
hosts <- db$hosts
viruses <- db$viruses
associations <- db$associations
rm(db)
#---- All zoonoses ----
data_set = hosts %>%
filter(hMarOTerr == "Terrestrial",
hWildDomFAO == "wild",
!is.na(PdHoSa.cbCst_order))
outcome_variable = "NSharedWithHoSa"
model_family = poisson
#  Create dummy variables for orders to use as random effects
dummys = as.data.frame(with(data_set, model.matrix(~hOrder))[,-1])
data_set = cbind(data_set, dummys)
dummy_terms = paste0("s(", names(dummys), ", bs = 're')")
names(dummy_terms) <- names(dummys)
## Create data.frame of all possible models
terms = list(
mass = "s(hMassGramsPVR, bs = 'tp', k=7)",
interaction = c(
"s(HabAreaCropLn, bs = 'tp', k=7)   + s(HabAreaCropChgLn, bs = 'tp', k=7)",
"s(HabAreaGrassLn, bs = 'tp', k=7)  + s(HabAreaGrassChgLn, bs = 'tp', k=7)",
"s(HabAreaUrbanLn, bs = 'tp', k=7)  + s(HabAreaUrbanChgLn, bs = 'tp', k=7)",
"s(HabInhabitedLn, bs = 'tp', k=7)  + s(HabInhabitedChgLn, bs = 'tp', k=7)",
"s(TotHumPopLn, bs = 'tp', k=7) + s(TotHumPopChgLn, bs = 'tp', k=7) + s(UrbRurPopRatioLn, bs = 'tp', k=7) + s(UrbRurPopRatioChg, bs = 'tp', k=7)",
"s(HumPopDensLn, bs = 'tp', k=7) + s(HumPopDensLnChg, bs = 'tp', k=7) + s(UrbRurPopRatioLn, bs = 'tp', k=7) + s(UrbRurPopRatioChg, bs = 'tp', k=7)"),
interaction2 = "s(hHuntedIUCN, bs='re')",
interaction3 = "s(hArtfclHbttUsrIUCN, bs='re')",
phylo_distance = c("s(PdHoSa.cbCst, bs = 'tp', k=7)", "s(PdHoSaSTPD, bs = 'tp', k=7)"),
bias = c("s(hDiseaseZACitesLn, bs = 'tp', k=7)"),
offset = "offset(LnTotNumVirus)",
stringsAsFactors=FALSE)
terms = c(dummy_terms, terms)
if (!original){
all_zoonoses_new=fit_all_gams(data_set,
outcome_variable,
poisson,
terms)
} else {
all_zoonoses = fit_all_gams(data_set,
outcome_variable,
poisson,
terms)
}
}
# ---- Viral Traits GAM - All Associations ----
for (original in c(T,F)){
db <- readRDS("Olival/intermediates/postprocessed_database.rds")
# our modification
if (!original){
V <- read.xlsx('Datasets/Olival_w_phylobin.xlsx',sheetIndex = 1)
db$viruses <- cbind(db$viruses,V[,c('pfIsZ','pfIsZS','nonZ')])
db$viruses <- db$viruses[!as.logical(db$viruses$nonZ),]
}
hosts <- db$hosts
viruses <- db$viruses
associations <- db$associations
rm(db)
PD_centers = names(viruses)[stri_detect_regex(names(viruses), "^(cb|st)_.*(?<!stringent)$")]
model_family = binomial
data_set = viruses %>%
mutate_each_(funs("logp"), vars=PD_centers)
names(data_set)[names(data_set) %in% PD_centers] <- paste0(PD_centers, "Ln")
PD_centers <- paste0(PD_centers, "Ln")
dummys = as.data.frame(with(viruses, model.matrix(~vFamily))[,-1])
data_set = cbind(data_set, dummys)
dummy_terms = paste0("s(", names(dummys), ", bs = 're')")
names(dummy_terms) <- names(dummys)
terms = list(
PD     = paste0("s(", PD_centers, ", bs='tp', k=7)"),
bias   = c("s(vPubMedCitesLn, bs='tp', k=7)", "s(vWOKcitesLn, bs='tp', k=7)"),
strand = c("s(RNA, bs='re')", "s(SS, bs='re')", "s(vCytoReplicTF, bs='re')"),
vector = "s(Vector, bs='re')",
env = "s(Envelope, bs='re')",
genome = "s(vGenomeAveLengthLn, bs='tp', k=7)",
stringsAsFactors=FALSE)
if (original){
vtraits = fit_all_gams(data_set,
outcome_variable = "IsZoonotic",
model_family = binomial,
terms)
data_set_old <- data_set
} else {
data_set_new <- data_set
vtraits_new = fit_all_gams(data_set,
outcome_variable = "IsZoonotic",
model_family = binomial,
terms)
}
}
save(list=ls(),file='intermediates/phylofactor_comparisons')
save(list=ls(),file='Workspaces/phylofactor_comparisons')
rm(list=ls())
library(phylofactor)
library(xlsx)
library(stringi)
library(dplyr)
library(parallel)
library(ggplot2)
library(ggpubr)
library(viridis)
source('R/fisherFactor.R')
source('R/visualization_fcns.R')
source("Olival/R/model_reduction.R")
source("Olival/R/fit_gam.R")
source("Olival/R/relative_contributions.R")
source("Olival/R/cross_validation.R")
source("Olival/R/logp.R")
parpf <- function(reps,pf){
Pvals <- matrix(NA,nrow=reps,ncol=pf$nfactors)
for (nn in 1:reps){
Z <- sample(pf$Data,size=length(pf$Data),replace=T)
names(Z) <- pf$tree$tip.label
pf <- fisherFactor(Z,pf$tree,nfactors=9,TestFunction = WilcoxTest)
Pvals[nn,] <- pf$pvals
}
return(Pvals)
}
load('Workspaces/IsZoonotic_phylofactorization')
db <- readRDS("~/Bozeman/BZDEL/Data/Olival/intermediates/postprocessed_database.rds")
all.equal(tree$tip.label,sapply(as.list(db$viruses$vVirusNameCorrected),toString))
db <- readRDS("Olival/intermediates/postprocessed_database.rds")
all.equal(tree$tip.label,sapply(as.list(db$viruses$vVirusNameCorrected),toString))
hosts <- db$hosts
viruses <- db$viruses
associations <- db$associations
rm(db)
PD_centers = names(viruses)[stri_detect_regex(names(viruses), "^(cb|st)_.*(?<!stringent)$")]
data_set = viruses %>%
mutate_each_(funs("logp"), vars=PD_centers)
names(data_set)[names(data_set) %in% PD_centers] <- paste0(PD_centers, "Ln")
Z <- data_set$cb_dist_noHoSa_maxLn
names(Z) <- data_set$vVirusNameCorrected
WilcoxTest <- function(grps,tree,Z){
s1 <- Z[tree$tip.label[grps[[1]]]]
s2 <- Z[tree$tip.label[grps[[2]]]]
pval <- tryCatch(wilcox.test(s1,s2)$p.value,
error=function(e) 1)
return(pval)
}
pf.cb_dist_noHoSa_maxLn <- fisherFactor(Z,tree,nfactors=9,TestFunction = WilcoxTest)
library(phylofactor)
pf.cb_dist_noHoSa_maxLn <- fisherFactor(Z,tree,nfactors=9,TestFunction = WilcoxTest)
############ Olival cb_dist_noHoSa_maxLn factorization
library(phylofactor)
library(xlsx)
library(stringi)
library(dplyr)
library(parallel)
library(ggplot2)
library(ggpubr)
library(viridis)
source('R/fisherFactor.R')
source('R/visualization_fcns.R')
source("Olival/R/model_reduction.R")
source("Olival/R/fit_gam.R")
source("Olival/R/relative_contributions.R")
source("Olival/R/cross_validation.R")
source("Olival/R/logp.R")
parpf <- function(reps,pf){
Pvals <- matrix(NA,nrow=reps,ncol=pf$nfactors)
for (nn in 1:reps){
Z <- sample(pf$Data,size=length(pf$Data),replace=T)
names(Z) <- pf$tree$tip.label
pf <- fisherFactor(Z,pf$tree,nfactors=9,TestFunction = WilcoxTest)
Pvals[nn,] <- pf$pvals
}
return(Pvals)
}
load('Workspaces/IsZoonotic_phylofactorization')
db <- readRDS("Olival/intermediates/postprocessed_database.rds")
all.equal(tree$tip.label,sapply(as.list(db$viruses$vVirusNameCorrected),toString))
hosts <- db$hosts
viruses <- db$viruses
associations <- db$associations
rm(db)
PD_centers = names(viruses)[stri_detect_regex(names(viruses), "^(cb|st)_.*(?<!stringent)$")]
data_set = viruses %>%
mutate_each_(funs("logp"), vars=PD_centers)
names(data_set)[names(data_set) %in% PD_centers] <- paste0(PD_centers, "Ln")
Z <- data_set$cb_dist_noHoSa_maxLn
names(Z) <- data_set$vVirusNameCorrected
WilcoxTest <- function(grps,tree,Z){
s1 <- Z[tree$tip.label[grps[[1]]]]
s2 <- Z[tree$tip.label[grps[[2]]]]
pval <- tryCatch(wilcox.test(s1,s2)$p.value,
error=function(e) 1)
return(pval)
}
pf.cb_dist_noHoSa_maxLn <- fisherFactor(Z,tree,nfactors=9,TestFunction = WilcoxTest)
ncores=7
reps=50
cl <- phyloFcluster(ncores)
clusterExport(cl,varlist = c('fisherFactor','parpf','WilcoxTest'))
reps=as.list(rep(reps,ncores))
Ps <- parLapply(cl,reps,fun=parpf,pf=pf.cb_dist_noHoSa_maxLn)
stopCluster(cl)
rm('cl')
for (i in 1:length(Ps)){
if (i==1){Pvals.cb <- Ps[[i]]} else{Pvals.cb <- rbind(Pvals,Ps[[i]])}
}
rm('Ps')
parpf <- function(reps,pf){
Pvals <- matrix(NA,nrow=reps,ncol=pf$nfactors)
for (nn in 1:reps){
Z <- sample(pf$Data,size=length(pf$Data),replace=T)
names(Z) <- pf$tree$tip.label
pf <- fisherFactor(Z,pf$tree,nfactors=9,TestFunction = WilcoxTest)
Pvals[nn,] <- pf$pvals
}
return(Pvals)
}
rm(list=ls())
load('Workspaces/IsZoonotic_phylofactorization')
db <- readRDS("Olival/intermediates/postprocessed_database.rds")
parpf.cb <- function(reps,pf){
Pvals <- matrix(NA,nrow=reps,ncol=pf$nfactors)
for (nn in 1:reps){
Z <- sample(pf$Data,size=length(pf$Data),replace=T)
names(Z) <- pf$tree$tip.label
pf <- fisherFactor(Z,pf$tree,nfactors=9,TestFunction = WilcoxTest)
Pvals[nn,] <- pf$pvals
}
return(Pvals)
}
all.equal(tree$tip.label,sapply(as.list(db$viruses$vVirusNameCorrected),toString))
hosts <- db$hosts
viruses <- db$viruses
associations <- db$associations
rm(db)
PD_centers = names(viruses)[stri_detect_regex(names(viruses), "^(cb|st)_.*(?<!stringent)$")]
data_set = viruses %>%
mutate_each_(funs("logp"), vars=PD_centers)
names(data_set)[names(data_set) %in% PD_centers] <- paste0(PD_centers, "Ln")
Z <- data_set$cb_dist_noHoSa_maxLn
names(Z) <- data_set$vVirusNameCorrected
WilcoxTest <- function(grps,tree,Z){
s1 <- Z[tree$tip.label[grps[[1]]]]
s2 <- Z[tree$tip.label[grps[[2]]]]
pval <- tryCatch(wilcox.test(s1,s2)$p.value,
error=function(e) 1)
return(pval)
}
pf.cb_dist_noHoSa_maxLn <- fisherFactor(Z,tree,nfactors=9,TestFunction = WilcoxTest)
################ Null Simulation ##############
ncores=7
reps=50
cl <- phyloFcluster(ncores)
clusterExport(cl,varlist = c('fisherFactor','parpf','WilcoxTest'))
reps=as.list(rep(reps,ncores))
Ps <- parLapply(cl,reps,fun=parpf.cb,pf=pf.cb_dist_noHoSa_maxLn)
stopCluster(cl)
rm('cl')
for (i in 1:length(Ps)){
if (i==1){Pvals.cb <- Ps[[i]]} else{Pvals.cb <- rbind(Pvals,Ps[[i]])}
}
rm('Ps')
################ Visualization #################
nfactors <- pf.cb_dist_noHoSa_maxLn$nfactors
ddf <- data.frame('Pvals'=c(t(Pvals)),
'factor'=rep(1:nfactors,nrow(Pvals)),
'replicate'=rep(1:nrow(Pvals),each=nfactors))
obs <- data.frame('Pvals'=pf.cb_dist_noHoSa_maxLn$pvals,'factor'=1:9,'replicate'=NA)
ddf <- rbind(ddf,obs)
cols <- c('Null Simulations'='black','Observed Phylofactorization'='red')
PLOT <- ggplot(ddf,aes(factor,Pvals))+
stat_summary(data = ddf[!is.na(ddf$replicate),],
geom='ribbon',
fun.ymin=function(x) quantile(x,0.05),
fun.ymax=function(x) quantile(x,1),
alpha=0.2,lwd=2)+
stat_summary(data = ddf[!is.na(ddf$replicate),],
aes(x=factor,y=Pvals,color='Null Simulations'),geom='line',fun.y = mean,lwd=2)+
geom_line(data=ddf[is.na(ddf$replicate),],
aes(y=Pvals,color='Observed Phylofactorization'),lwd=2)+
scale_y_continuous(trans='log',breaks = 10^(c(-8:0)))+
scale_x_continuous(breaks=1:10)+
scale_fill_continuous(cols)+
theme(legend.position = c(.5,.5),title = element_text(size=18))+
ggtitle('Phylofactorization - observed vs. null')
GG <- pf.tree(pf.cb_dist_noHoSa_maxLn,
bg.color='grey',
bg.alpha=0.5)$ggplot
ggarrange(GG,PLOT,ncol = 2,nrow=1)
ggsave(filename='Figures/Wilcox_factorization_cb_dist.tiff',height=8,width=16)
nfactors <- pf.cb_dist_noHoSa_maxLn$nfactors
ddf <- data.frame('Pvals'=c(t(Pvals.cb)),
'factor'=rep(1:nfactors,nrow(Pvals.cb)),
'replicate'=rep(1:nrow(Pvals.cb),each=nfactors))
obs <- data.frame('Pvals'=pf.cb_dist_noHoSa_maxLn$pvals,'factor'=1:9,'replicate'=NA)
ddf <- rbind(ddf,obs)
nfactors
nfactors <- pf.cb_dist_noHoSa_maxLn$nfactors
ddf <- data.frame('Pvals'=c(t(Pvals.cb)),
'factor'=rep(1:nfactors,nrow(Pvals.cb)),
'replicate'=rep(1:nrow(Pvals.cb),each=nfactors))
obs <- data.frame('Pvals'=pf.cb_dist_noHoSa_maxLn$pvals,
'factor'=1:nfactors,
'replicate'=NA)
ddf <- rbind(ddf,obs)
cols <- c('Null Simulations'='black','Observed Phylofactorization'='red')
PLOT <- ggplot(ddf,aes(factor,Pvals.cb))+
stat_summary(data = ddf[!is.na(ddf$replicate),],
geom='ribbon',
fun.ymin=function(x) quantile(x,0.05),
fun.ymax=function(x) quantile(x,1),
alpha=0.2,lwd=2)+
stat_summary(data = ddf[!is.na(ddf$replicate),],
aes(x=factor,y=Pvals,color='Null Simulations'),geom='line',fun.y = mean,lwd=2)+
geom_line(data=ddf[is.na(ddf$replicate),],
aes(y=Pvals,color='Observed Phylofactorization'),lwd=2)+
scale_y_continuous(trans='log',breaks = 10^(c(-8:0)))+
scale_x_continuous(breaks=1:10)+
scale_fill_continuous(cols)+
theme(legend.position = c(.5,.5),title = element_text(size=18))+
ggtitle('Phylofactorization - observed vs. null')
GG <- pf.tree(pf.cb_dist_noHoSa_maxLn,
bg.color='grey',
bg.alpha=0.5)$ggplot
ggarrange(GG,PLOT,ncol = 2,nrow=1)
GG
PLOT
ddf
warnings()
hist(Z)
hist(Z)
library(RCurl)
library(ape)
library(phylofactor)
library(parallel)
library(dplyr)
library(ggpubr)
library(xlsx)
library(ggtree)
source('R/fisherFactor.R')
source('R/visualization_fcns.R')
parpf <- function(reps,pf,phat){
Pvals <- matrix(NA,nrow=reps,ncol=pf$nfactors)
for (nn in 1:reps){
Z <- rbinom(Ntip(pf$tree),size=1,prob=phat)
names(Z) <- pf$tree$tip.label
pf <- fisherFactor(Z,pf$tree,nfactors=pf$nfactors)
Pvals[nn,] <- pf$pvals
}
return(Pvals)
}
parf <- function(reps,pf,phat){
Fs <- matrix(NA,nrow=reps,ncol=pf$nfactors)
for (nn in 1:reps){
Z <- rbinom(Ntip(pf$tree),size=1,prob=phat)
names(Z) <- pf$tree$tip.label
pf <- fisherFactor(Z,pf$tree,nfactors=10)
Pvals[nn,] <- pf$pvals
}
return(Pvals)
}
load('Workspaces/Viral_taxonomy_tree.rdata')
VOlival <- read.csv('Olival/data/viruses.csv')
tree <- di2multi(tree) ## resolve polytomies
all.equal(tree$tip.label,sapply(as.list(VOlival$vVirusNameCorrected),toString))
# Phylofactorization of IsZoonotic ----------------------------------------
Z <- VOlival$IsZoonotic
names(Z) <- tree$tip.label
phat <- mean(Z)     #fraction of viruses which are zoonotic in Olival data
grps <- getGroups(tree)
